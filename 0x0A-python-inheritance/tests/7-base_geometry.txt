=============================
7-base_geometry.py
=============================

using ``BaseGeometry``
--------------------------

This modules defines a base geometry class BaseGeometry.

Instantiation
=============

``BaseGeometry`` includes no attributes, and accordingly is initialized with no arguments.

::

Import the class:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()

::
Now test it:

	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

	>>> bg.integer_validator("my_int", 12)

	>>> bg.integer_validator("name", "Jared")
	Traceback (most recent call last):
	TypeError: name must be an integer

	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
	ValueError: age must be greater than 0

	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
	ValueError: distance must be greater than 0

	>>> bg.integer_validator("average", 7.8)
	Traceback (most recent call last):
	TypeError: average must be an integer


	>>> bg.integer_validator("average")
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'


	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

	>>> bg.integer_validator("Big", 245545433222222222222222222222223333333333333333333333333333455555555555555555555555444444444444444444446666666666666666666666666666)


	>>> bg.integer_validator("age", [3])
	Traceback (most recent call last):
	TypeError: age must be an integer

	>>> bg.integer_validator("age", {3, 4})
	Traceback (most recent call last):
	TypeError: age must be an integer

	>>> bg.integer_validator("age", None)
	Traceback (most recent call last):
	TypeError: age must be an integer
